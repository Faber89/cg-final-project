{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Villa Almerico Capra \"La Rotonda\"","google":"","tagline":"Construction of three-dimensional model of the Palladian Villa in Plasm.js","body":"![VillaFront](http://upload.wikimedia.org/wikipedia/commons/e/ec/Villa_Rotonda_side.jpg)\r\n\r\n## Introduction\r\n\r\nThe Palladian Villas are a collection of villas built in the mid-sixteenth century by Andrea Palladio in the territory of the Republic of Venice and concentrated mostly in the province of Vicenza. One of these is Villa La Rotonda, a Renaissance villa just outside Vicenza, northern Italy. The proper name is Villa Almerico Capra, but it is also known as La Rotonda.\r\n\r\nThe design is for a completely symmetrical building having a square plan with four facades, each of which has a projecting portico. The whole is contained within an imaginary circle which touches each corner of the building and centres of the porticos. The name La Rotonda refers to the central circular hall with its dome. To describe the villa, as a whole, as a 'rotonda' is technically incorrect, as the building is not circular but rather the intersection of a square with a cross. Each portico has steps leading up, and opens via a small cabinet or corridor to the circular domed central hall. This and all other rooms were proportioned with mathematical precision according to Palladio's own rules of architecture which he published in the Quattro Libri dell'Architettura (Source - [Wikipedia](http://en.wikipedia.org/wiki/Villa_Capra_%22La_Rotonda%22), More information can be found on the official website - [Villa la Rotonda](http://www.villalarotonda.it/)).\r\n\r\n## Hierarchical decomposition of the model\r\n\r\nIn the study of the creation of three-dimensional model, we chose to hierarchically decompose the structure of the villa into five parts:\r\n* **Base of the structure with garden**\r\n* **Facade of the villa**\r\n* **Colonnade**\r\n* **Gable of the structure**\r\n* **Roof with dome**\r\n\r\nFor all the hierarchical tiers were used all the operators and functions used during the course, like `SIMPLEX_GRID` primitive, `BEZIER` and `NUBS` mapped on appropriate domains. Moreover the affine transformations Translate `T`, Scale `S` and Rotate `R` were used for the building and the placement of all the elements.\r\nMoreover, for the realization of the model were defined support functions to speed up the work:\r\n* `makeKnots(points,grade)`\r\n* `scalePoints(pointList, scale)`\r\n* `rotatePoints(pointList, angle, axis)`\r\n* `movesPoints(pointList, axis, qty)`\r\n\r\nRespectively, the first is used to generate the control points of a `NUBS` while the remaining, to scale, rotate or translate a set of points.\r\n\r\n_Below are shown the results obtained in the iterative modeling through the development environment **plasm.js**, and for each iteration some considerations and code concerning the realization._\r\n\r\n### Base of the structure with garden\r\n\r\nFor the construction of the base of the structure were mainly used `SIMPLEX_GRID`, `T` (translation), `R` (rotation), `REPLICA`, `STRUCT` and `NUBS` functions to draw transfinite non-uniform B-Spline.\r\nIn addition, we chose to make only one side of the base of the structure and then get the other through affine transformations T (translation) and R (rotation) because they are symmetrical.\r\nParticularly, in the building of the tunnel behind the steps, the archway is made by two bidimensional NUBS for the archs and a product between them by the `BEZIER` (S1) function. The grates are realized by two SIMPLEX_GRID (one vertical and one horizontal) replicated and then translated through the function REPLICA\r\n\r\n![Base](https://github.com/Faber89/cg-final-project/blob/master/images/base.jpg?raw=true)\r\n\r\nCode for the construction of staircases and gratings:\r\n```\r\n  ...\r\n  //Stairs\r\n  var stairsHeight = 3/23;\r\n  var stairsDepth = 6/22;\r\n  var stairsLength = 7;\r\n  var numberOfStairs = 22; \r\n\r\n  var drawStairs = function(){\r\n    var stairs = [];\r\n    for (var i = 0; i < numberOfStairs; i++) {\r\n      stairs.push(SIMPLEX_GRID([\r\n        [0,stairsLength],\r\n        [-i*(stairsDepth),stairsDepth],\r\n        [-i*stairsHeight,stairsHeight]\r\n      ]));\r\n    };\r\n    return COLOR(columnsColor)(STRUCT(stairs));\r\n  }\r\n\r\n  //Barrier\r\n  var orizontalBarrier = COLOR([0,0,0])(\r\n    SIMPLEX_GRID([[0,1],[0,0.02],[0,0.02]]));\r\n  var verticalBarrier = COLOR([0,0,0])(\r\n    SIMPLEX_GRID([[0,0.02],[0,0.02],[0,1]]));\r\n\t\t\r\n  walls.push(\r\n    T([0,1,2])([distanceFromBorder,0.3,1.4])(\r\n    R([0,1])(PI/2)(\r\n    STRUCT([\r\n      STRUCT(REPLICA(9)([T([2])([0.1]),orizontalBarrier])),\r\n      STRUCT(REPLICA(9)([T([0])([0.1]),verticalBarrier]))]\r\n  ))));\r\n  ...\r\n```\r\n\r\n### Facade of the villa\r\nIn this hierarchical level is made the façade of the villa with the same principle used in the construction of the base. Once created a facade with door and windows, the others are obtained through affine transformations.\r\nFor the construction of the grates of the windows and the door is being used the `POLYLINE` function, while for the eaves a `NUBS` of the second degree to draw the profile.\r\n\r\n![Facade](https://github.com/Faber89/cg-final-project/blob/master/images/facade.jpg?raw=true)\r\n\r\nCode used for the construction of the gratings of one of the windows drawn in the model:\r\n```\r\n  ...\r\n  var drawSquareGrate = function(hDistance, vDistance) {\r\n    var grateIntervals = 0.2;\r\n\r\n    var polyStruct = [];\r\n    for (var i = 0; i <= hDistance; i += grateIntervals) {\r\n      polyStruct.push( POLYLINE([[i,0,0],[i,0,vDistance]]) );\r\n    }\r\n    for (var i = 0; i <= vDistance; i += grateIntervals) {\r\n      polyStruct.push( POLYLINE([[0,0,i],[hDistance,0,i]]) );\r\n    }\r\n\r\n    return COLOR([0,0,0])(STRUCT(polyStruct));\r\n  };  \r\n  ...\r\n```\r\n\r\n### Colonnade\r\n\r\nThe colonnade is the most complex part of the project, along with the gable, as it was decided to model the capital as an Archimedean spiral drawn by a `NUBS` ([Archimedean spiral](http://en.wikipedia.org/wiki/Archimedean_spiral)). It was also used a domain light enough to avoid overloading the global model. To draw the column instead, a curve was drawn to represent the profile (Nubs through a second level) and then build from it the surface of the column using the function `ROTATIONAL_SURFACE` (using a suitable two-dimensional domain).\r\n\r\n![Column](https://github.com/Faber89/cg-final-project/blob/master/images/column.jpg?raw=true)\r\n\r\nCode of the function that generates the control points of the spiral:\r\n```\r\n  ...\r\n  var capitalControlsPoints = function(maxRadius) {\r\n    maxRadius = maxRadius || 1;\r\n    var controlPoints = [];\r\n\t\t\t\t \r\n    var i = 0;\r\n    var Angle = PI/2;\r\n\r\n    for (i = 0; i < 13; i++) {\r\n      controlPoints.push( [\r\n        maxRadius * ( COS(i*Angle) + i*SIN(i*Angle)  ),\r\n        0,\r\n        maxRadius * ( SIN(i*Angle) - i*COS(i*Angle)  )] );\r\n      }\r\n\t\t\t\t \r\n    return controlPoints;\r\n  };\r\n  ...\r\n```\r\n\r\n### Gable of the structure\r\nIn the realization of the gable of the structure have been used mainly curves (NUBS and BEZIER) to draw the profile of each party, and thereby complete the area needed. Furthermore, in the upper part of the eardrum have been positioned the pedestals necessary to the statues (which for simplicity, have not been implemented in the project).In particular, the the roof has been created by the product of Nubs and BEZIER (using S1), while the ornaments with the `CUBOID` function properly replicated and roto-translated.\r\n\r\n![Gable](https://github.com/Faber89/cg-final-project/blob/master/images/Gable.jpg?raw=true)\r\n\r\nCode used for the generation of the cuboidal ornaments: \r\n```\r\n  ...\r\n  var drawEmbroidery = function(l,d,trasl,x,y,z,n,f){\r\n    var cubes = [];\t\t\t\r\n    var p = l - (d + f + 2*x);\r\n    var i = p/n;\r\n    var cube = SIMPLEX_GRID([[0,x],[0,y],[0,z]]);\r\n\r\n    cubes.push(T([0,2])([d-(i/2-x/2),trasl])(cube));\r\n    cubes.push(T([0,2])([l-f-x+(i/2-x/2),trasl])(cube));\r\n    var j = 0;\r\n    while (j < n) {\r\n      cubes.push(T([0,2])([\r\n        (d+x)+(i/2-x/2)+(j*i),\r\n        trasl])(cube));\r\n      j += 1;\r\n    }\r\n    return COLOR(columnsColor)(STRUCT(cubes));\r\n  }\r\n  ...\r\n```\r\n\r\n### Roof with dome\r\nThe roof has been created through the product of a `NUBS` of the first level and a point representing the apex of the roof while for the dome were made ​​several profiles (for coloring them differently) and then perform through the `ROTATIONAL_SURFACE` each surface.\r\n\r\n![RoofAndDome](https://github.com/Faber89/cg-final-project/blob/master/images/roof&Dome.jpg?raw=true)\r\n\r\n### Complete model\r\n\r\nThe complete model, as a result of the union of each hierarchical level, is as follows (it is compared with some images of the villa):\r\n\r\n**Central part of the villa**\r\n![Model1](https://github.com/Faber89/cg-final-project/blob/master/images/completeModel1.jpg?raw=true)\r\n\r\n**Side of the villa - 1**\r\n![Model2](https://github.com/Faber89/cg-final-project/blob/master/images/completeModel2.jpg?raw=true)\r\n\r\n**Side of the villa - 2**\r\n![Model3](https://github.com/Faber89/cg-final-project/blob/master/images/completeModel3.jpg?raw=true)\r\n\r\n**Staircase and colonnade**\r\n![Model4](https://github.com/Faber89/cg-final-project/blob/master/images/completeModel4.jpg?raw=true)\r\n\r\n**View from the top**\r\n![Model5](https://github.com/Faber89/cg-final-project/blob/master/images/completeModel5.jpg?raw=true)\r\n\r\n**To see the full javascript code: [model.js](https://raw.github.com/cvdlab-cg/418041/master/final-project/model.js)**\r\n\r\n## Disclaimer\r\nSome content on this site (including text and images) are taken from the web and belong to their respective owners."}